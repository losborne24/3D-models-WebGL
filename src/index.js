var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Color;\n' +
  'attribute vec4 a_Normal;\n' +
  'attribute vec2 a_TexCoords;\n' +
  'uniform mat4 u_ProjMatrix;\n' +
  'uniform mat4 u_ViewMatrix;\n' +
  'uniform mat4 u_ModelMatrix;\n' +    // Model matrix
  'uniform mat4 u_NormalMatrix;\n' +   // Transformation matrix of the normal
  'uniform vec3 u_LightColor;\n' +     // Light color
  'uniform vec3 u_LightDirection;\n' + // Light direction (in the world coordinate, normalized)
  'varying vec4 v_Color;\n' +
  'varying vec3 v_Normal;\n' +
  'varying vec2 v_TexCoords;\n' +
  'varying vec3 v_Position;\n' +
  'uniform bool u_isLighting;\n' +
  'void main() {\n' +
  '  gl_Position = u_ProjMatrix * u_ViewMatrix * u_ModelMatrix * a_Position;\n' +
  // Calculate the vertex position in the world coordinate
  '  v_Position = vec3(u_ModelMatrix * a_Position);\n' +
  '  v_Normal = normalize(vec3(u_NormalMatrix * a_Normal));\n' +
  '  v_Color = a_Color;\n' +
  '  v_TexCoords = a_TexCoords;\n' +
  '  if(u_isLighting)\n' +
  '  {\n' +
  '     vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n' +
  '     float nDotL = max(dot(normal, u_LightDirection), 0.0);\n' +
  // Calculate the color due to diffuse reflection
  '     vec3 diffuse = u_LightColor * a_Color.rgb * nDotL;\n' +
  '     v_Color = vec4(diffuse, a_Color.a);\n' + '  }\n' +
  '  else\n' +
  '  {\n' +
  '     v_Color = a_Color;\n' +
  '  }\n' +

  '}\n';

// Fragment shader 
var FSHADER_SOURCE =
  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
  '#endif\n' +
  'uniform bool u_UseTextures;\n' +    // Texture enable/disable flag    // Light color
  'uniform vec3 u_LightPosition;\n' +  // Position of the light source
  'uniform vec3 u_AmbientLight;\n' +   // Ambient light color
  'varying vec3 v_Normal;\n' +
  'varying vec3 v_Position;\n' +
  'varying vec4 v_Color;\n' +
  'uniform sampler2D u_Sampler;\n' +
  'varying vec2 v_TexCoords;\n' +
  'void main() {\n' +
  'if (u_UseTextures) {\n' +
  '     gl_FragColor = texture2D(u_Sampler, v_TexCoords);\n' +
  '  } else {\n' +
  '  gl_FragColor = v_Color;\n' +
  '  }\n' +
  '}\n';


var modelMatrix = new Matrix4(); // The model matrix
var viewMatrix = new Matrix4();  // The view matrix
var projMatrix = new Matrix4();  // The projection matrix
var g_normalMatrix = new Matrix4();  // Coordinate transformation matrix for normals

var ANGLE_STEP = 3.0;  // The increments of rotation angle (degrees)
var ZOOM_STEP = 0.5;
var g_xAngle = 0.0;    // The rotation x angle (degrees)
var g_yAngle = 0.0;    // The rotation y angle (degrees)
var zoom = 15;
var arr_is = [false, false];

var translation = 0.0;
var train_right = true;

function main() {
  // Retrieve <canvas> element
  var canvas = document.getElementById('webgl');

  // Get the rendering context for WebGL
  var gl = getWebGLContext(canvas);
  if (!gl) {
    console.log('Failed to get the rendering context for WebGL');
    return;
  }

  // Initialize shaders
  if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
    console.log('Failed to intialize shaders.');
    return;
  }

  // Set clear color and enable hidden surface removal
  gl.clearColor(0.5, 0.5, 0.5, 1.0);  // change to light blue/grey
  gl.enable(gl.DEPTH_TEST);

  // Clear color and depth buffer
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  // Get the storage locations of uniform attributes
  var u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
  var u_ViewMatrix = gl.getUniformLocation(gl.program, 'u_ViewMatrix');
  var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
  var u_ProjMatrix = gl.getUniformLocation(gl.program, 'u_ProjMatrix');
  var u_LightColor = gl.getUniformLocation(gl.program, 'u_LightColor');
  var u_LightDirection = gl.getUniformLocation(gl.program, 'u_LightDirection');

  // Trigger using lighting or not
  var u_isLighting = gl.getUniformLocation(gl.program, 'u_isLighting');

  if (!u_ModelMatrix || !u_ViewMatrix || !u_NormalMatrix ||
    !u_ProjMatrix || !u_LightColor || !u_LightDirection ||
    !u_isLighting) {
    console.log('Failed to Get the storage locations of u_ModelMatrix, u_ViewMatrix, and/or u_ProjMatrix');
    return;
  }

  // Set the light color (white)
  gl.uniform3f(u_LightColor, 1.0, 1.0, 1.0);
  // Set the light direction (in the world coordinate)
  var lightDirection = new Vector3([0.5, 3.0, 4.0]);
  lightDirection.normalize();     // Normalize
  gl.uniform3fv(u_LightDirection, lightDirection.elements);

  // Calculate the view matrix and the projection matrix
  viewMatrix.setLookAt(0, 0, zoom, 0, 0, -100, 0, 1, 0);

  projMatrix.setPerspective(30, canvas.width / canvas.height, 1, 100);
  // Pass the model, view, and projection matrix to the uniform variable respectively
  gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);
  gl.uniformMatrix4fv(u_ProjMatrix, false, projMatrix.elements);

  u_UseTextures = gl.getUniformLocation(gl.program, "u_UseTextures");
  u_Sampler = gl.getUniformLocation(gl.program, 'u_Sampler');

  var bwstripe = gl.createTexture();
  bwstripe.image = new Image();
  bwstripe.image.src = './textures/bwstripe.png';
  bwstripe.image.onload = function () {
    console.log("bwstripe texture loaded")
    loadTexture(gl, bwstripe, gl.TEXTURE1);
  };
  var grass = gl.createTexture();
  grass.image = new Image();
  grass.image.src = './textures/grass.png';
  grass.image.onload = function () {
    console.log("grass texture loaded")
    loadTexture(gl, grass, gl.TEXTURE2);
  };
  var road = gl.createTexture();
  road.image = new Image();
  road.image.src = './textures/road.png';
  road.image.onload = function () {
    console.log("road texture loaded")
    loadTexture(gl, road, gl.TEXTURE3);
  };
  var bricks = gl.createTexture();
  bricks.image = new Image();
  bricks.image.src = './textures/bricks.png';
  bricks.image.onload = function () {
    console.log("bricks texture loaded")
    loadTexture(gl, bricks, gl.TEXTURE4);
  };
  var loop = function () {
    translation = animateTranslate(translation);
    draw(gl, u_ModelMatrix, u_NormalMatrix, u_isLighting, u_UseTextures, arr_is, translation);
    requestAnimationFrame(loop, canvas); // Request that the browser calls tick
  };
  document.onkeydown = function (ev) {
    arr_is = keydown(ev, gl, u_ModelMatrix, u_NormalMatrix, u_isLighting, u_ViewMatrix, arr_is, translation);
  };

  draw(gl, u_ModelMatrix, u_NormalMatrix, u_isLighting, u_UseTextures, arr_is, translation);
  loop();
}

function keydown(ev, gl, u_ModelMatrix, u_NormalMatrix, u_isLighting, u_ViewMatrix, arr_is, translation) {
  switch (ev.keyCode) {
    case 40: // Up arrow key -> the positive rotation of arm1 around the y-axis
      g_xAngle = (g_xAngle + ANGLE_STEP) % 360;
      break;
    case 38: // Down arrow key -> the negative rotation of arm1 around the y-axis
      g_xAngle = (g_xAngle - ANGLE_STEP) % 360;
      break;
    case 39: // Right arrow key -> the positive rotation of arm1 around the y-axis
      g_yAngle = (g_yAngle + ANGLE_STEP) % 360;
      break;
    case 37: // Left arrow key -> the negative rotation of arm1 around the y-axis
      g_yAngle = (g_yAngle - ANGLE_STEP) % 360;
      break;
    case 90: // z - zoom out
      zoom += ZOOM_STEP;
      viewMatrix.setLookAt(0, 0, zoom, 0, 0, -100, 0, 1, 0);
      gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);
      break;
    case 88: //x - zoom in
      zoom -= ZOOM_STEP;
      viewMatrix.setLookAt(0, 0, zoom, 0, 0, -100, 0, 1, 0);
      gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);
      break;
    case 84: //t = toggle textures
      arr_is[0] = !(arr_is[0]);
      break;
    case 89: //y = toggle lights
      arr_is[1] = !(arr_is[1]);

      break;
    default: return arr_is; // Skip drawing at no effective action
  }
  // Draw the scene
  draw(gl, u_ModelMatrix, u_NormalMatrix, u_isLighting, u_UseTextures, arr_is, translation);
  return arr_is;
}

function cylinder(gl, colour) {
  var vertices = new Float32Array([ //Coorindates
    0, 0, 0.5, 0, 0.5, 0.5, 0.0868240888335, 0.492403876506, 0.5, 0.171010071663, 0.469846310393, 0.5, 0.25, 0.433012701892, 0.5, 0.321393804843, 0.383022221559, 0.5, 0.383022221559, 0.321393804843, 0.5, 0.433012701892, 0.25, 0.5, 0.469846310393, 0.171010071663, 0.5, 0.492403876506, 0.0868240888335, 0.5, 0.5, 0.0, 0.5, 0.492403876506, -0.0868240888335, 0.5, 0.469846310393, -0.171010071663, 0.5, 0.433012701892, -0.25, 0.5, 0.383022221559, -0.321393804843, 0.5, 0.321393804843, -0.383022221559, 0.5, 0.25, -0.433012701892, 0.5, 0.171010071663, -0.469846310393, 0.5, 0.0868240888335, -0.492403876506, 0.5, 0, -0.5, 0.5, -0.0868240888335, -0.492403876506, 0.5, -0.171010071663, -0.469846310393, 0.5, -0.25, -0.433012701892, 0.5, -0.321393804843, -0.383022221559, 0.5, -0.383022221559, -0.321393804843, 0.5, -0.433012701892, -0.25, 0.5, -0.469846310393, -0.171010071663, 0.5, -0.492403876506, -0.0868240888335, 0.5, -0.5, 0.0, 0.5, -0.492403876506, 0.0868240888335, 0.5, -0.469846310393, 0.171010071663, 0.5, -0.433012701892, 0.25, 0.5, -0.383022221559, 0.321393804843, 0.5, -0.321393804843, 0.383022221559, 0.5, -0.25, 0.433012701892, 0.5, -0.171010071663, 0.469846310393, 0.5, -0.0868240888335, 0.492403876506, 0.5,//37
    0, 0, -0.5, 0, 0.5, -0.5, 0.0868240888335, 0.492403876506, -0.5, 0.171010071663, 0.469846310393, -0.5, 0.25, 0.433012701892, -0.5, 0.321393804843, 0.383022221559, -0.5, 0.383022221559, 0.321393804843, -0.5, 0.433012701892, 0.25, -0.5, 0.469846310393, 0.171010071663, -0.5, 0.492403876506, 0.0868240888335, -0.5, 0.5, 0.0, -0.5, 0.492403876506, -0.0868240888335, -0.5, 0.469846310393, -0.171010071663, -0.5, 0.433012701892, -0.25, -0.5, 0.383022221559, -0.321393804843, -0.5, 0.321393804843, -0.383022221559, -0.5, 0.25, -0.433012701892, -0.5, 0.171010071663, -0.469846310393, -0.5, 0.0868240888335, -0.492403876506, -0.5, 0, -0.5, -0.5, -0.0868240888335, -0.492403876506, -0.5, -0.171010071663, -0.469846310393, -0.5, -0.25, -0.433012701892, -0.5, -0.321393804843, -0.383022221559, -0.5, -0.383022221559, -0.321393804843, -0.5, -0.433012701892, -0.25, -0.5, -0.469846310393, -0.171010071663, -0.5, -0.492403876506, -0.0868240888335, -0.5, -0.5, 0.0, -0.5, -0.492403876506, 0.0868240888335, -0.5, -0.469846310393, 0.171010071663, -0.5, -0.433012701892, 0.25, -0.5, -0.383022221559, 0.321393804843, -0.5, -0.321393804843, 0.383022221559, -0.5, -0.25, 0.433012701892, -0.5, -0.171010071663, 0.469846310393, -0.5, -0.0868240888335, 0.492403876506, -0.5, //back

    0, 0.5, 0.5, 0, 0.5, -0.5, 0.0868240888335, 0.492403876506, 0.5, 0.0868240888335, 0.492403876506, -0.5,
    0.0868240888335, 0.492403876506, 0.5, 0.0868240888335, 0.492403876506, -0.5, 0.171010071663, 0.469846310393, 0.5, 0.171010071663, 0.469846310393, -0.5,
    0.171010071663, 0.469846310393, 0.5, 0.171010071663, 0.469846310393, -0.5, 0.25, 0.433012701892, 0.5, 0.25, 0.433012701892, -0.5,
    0.25, 0.433012701892, 0.5, 0.25, 0.433012701892, -0.5, 0.321393804843, 0.383022221559, 0.5, 0.321393804843, 0.383022221559, -0.5,
    0.321393804843, 0.383022221559, 0.5, 0.321393804843, 0.383022221559, -0.5, 0.383022221559, 0.321393804843, 0.5, 0.383022221559, 0.321393804843, -0.5,
    0.383022221559, 0.321393804843, 0.5, 0.383022221559, 0.321393804843, -0.5, 0.433012701892, 0.25, 0.5, 0.433012701892, 0.25, -0.5,
    0.433012701892, 0.25, 0.5, 0.433012701892, 0.25, -0.5, 0.469846310393, 0.171010071663, 0.5, 0.469846310393, 0.171010071663, -0.5,
    0.469846310393, 0.171010071663, 0.5, 0.469846310393, 0.171010071663, -0.5, 0.492403876506, 0.0868240888335, 0.5, 0.492403876506, 0.0868240888335, -0.5,
    0.492403876506, 0.0868240888335, 0.5, 0.492403876506, 0.0868240888335, -0.5, 0.5, 0.0, 0.5, 0.5, 0.0, -0.5, //9

    0, -0.5, 0.5, 0, -0.5, -0.5, 0.0868240888335, -0.492403876506, 0.5, 0.0868240888335, -0.492403876506, -0.5,
    0.0868240888335, -0.492403876506, 0.5, 0.0868240888335, -0.492403876506, -0.5, 0.171010071663, -0.469846310393, 0.5, 0.171010071663, -0.469846310393, -0.5,
    0.171010071663, -0.469846310393, 0.5, 0.171010071663, -0.469846310393, -0.5, 0.25, -0.433012701892, 0.5, 0.25, -0.433012701892, -0.5,
    0.25, -0.433012701892, 0.5, 0.25, -0.433012701892, -0.5, 0.321393804843, -0.383022221559, 0.5, 0.321393804843, -0.383022221559, -0.5,
    0.321393804843, -0.383022221559, 0.5, 0.321393804843, -0.383022221559, -0.5, 0.383022221559, -0.321393804843, 0.5, 0.383022221559, -0.321393804843, -0.5,
    0.383022221559, -0.321393804843, 0.5, 0.383022221559, -0.321393804843, -0.5, 0.433012701892, -0.25, 0.5, 0.433012701892, -0.25, -0.5,
    0.433012701892, -0.25, 0.5, 0.433012701892, -0.25, -0.5, 0.469846310393, -0.171010071663, 0.5, 0.469846310393, -0.171010071663, -0.5,
    0.469846310393, -0.171010071663, 0.5, 0.469846310393, -0.171010071663, -0.5, 0.492403876506, -0.0868240888335, 0.5, 0.492403876506, -0.0868240888335, -0.5,
    0.492403876506, -0.0868240888335, 0.5, 0.492403876506, -0.0868240888335, -0.5, 0.5, 0.0, 0.5, 0.5, 0.0, -0.5, //18

    0, 0.5, 0.5, 0, 0.5, -0.5, -0.0868240888335, 0.492403876506, 0.5, -0.0868240888335, 0.492403876506, -0.5,
    -0.0868240888335, 0.492403876506, 0.5, -0.0868240888335, 0.492403876506, -0.5, -0.171010071663, 0.469846310393, 0.5, -0.171010071663, 0.469846310393, -0.5,
    -0.171010071663, 0.469846310393, 0.5, -0.171010071663, 0.469846310393, -0.5, -0.25, 0.433012701892, 0.5, -0.25, 0.433012701892, -0.5,
    -0.25, 0.433012701892, 0.5, -0.25, 0.433012701892, -0.5, -0.321393804843, 0.383022221559, 0.5, -0.321393804843, 0.383022221559, -0.5,
    -0.321393804843, 0.383022221559, 0.5, -0.321393804843, 0.383022221559, -0.5, -0.383022221559, 0.321393804843, 0.5, -0.383022221559, 0.321393804843, -0.5,
    -0.383022221559, 0.321393804843, 0.5, -0.383022221559, 0.321393804843, -0.5, -0.433012701892, 0.25, 0.5, -0.433012701892, 0.25, -0.5,
    -0.433012701892, 0.25, 0.5, -0.433012701892, 0.25, -0.5, -0.469846310393, 0.171010071663, 0.5, -0.469846310393, 0.171010071663, -0.5,
    -0.469846310393, 0.171010071663, 0.5, -0.469846310393, 0.171010071663, -0.5, -0.492403876506, 0.0868240888335, 0.5, -0.492403876506, 0.0868240888335, -0.5,
    -0.492403876506, 0.0868240888335, 0.5, -0.492403876506, 0.0868240888335, -0.5, -0.5, 0.0, 0.5, -0.5, 0.0, -0.5, //27

    0, -0.5, 0.5, 0, -0.5, -0.5, -0.0868240888335, -0.492403876506, 0.5, -0.0868240888335, -0.492403876506, -0.5,
    -0.0868240888335, -0.492403876506, 0.5, -0.0868240888335, -0.492403876506, -0.5, -0.171010071663, -0.469846310393, 0.5, -0.171010071663, -0.469846310393, -0.5,
    -0.171010071663, -0.469846310393, 0.5, -0.171010071663, -0.469846310393, -0.5, -0.25, -0.433012701892, 0.5, -0.25, -0.433012701892, -0.5,
    -0.25, -0.433012701892, 0.5, -0.25, -0.433012701892, -0.5, -0.321393804843, -0.383022221559, 0.5, -0.321393804843, -0.383022221559, -0.5,
    -0.321393804843, -0.383022221559, 0.5, -0.321393804843, -0.383022221559, -0.5, -0.383022221559, -0.321393804843, 0.5, -0.383022221559, -0.321393804843, -0.5,
    -0.383022221559, -0.321393804843, 0.5, -0.383022221559, -0.321393804843, -0.5, -0.433012701892, -0.25, 0.5, -0.433012701892, -0.25, -0.5,
    -0.433012701892, -0.25, 0.5, -0.433012701892, -0.25, -0.5, -0.469846310393, -0.171010071663, 0.5, -0.469846310393, -0.171010071663, -0.5,
    -0.469846310393, -0.171010071663, 0.5, -0.469846310393, -0.171010071663, -0.5, -0.492403876506, -0.0868240888335, 0.5, -0.492403876506, -0.0868240888335, -0.5,
    -0.492403876506, -0.0868240888335, 0.5, -0.492403876506, -0.0868240888335, -0.5, -0.5, 0.0, 0.5, -0.5, 0.0, -0.5, //36
  ]);
  switch (colour) {
    case "grey":
      var colors = new Float32Array([    // Colors
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, //9
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, //18
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, //36
      ]);
      break;
    case "yellow":
      var colors = new Float32Array([    // Colors
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,//9
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,//9
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,//9
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0,//9
      ]);
      break;
    case "brown":
      var colors = new Float32Array([    // Colors
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, //9
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, //18  
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,//36
      ]);
      break;
    case "green":
      var colors = new Float32Array([    // Colors
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,//9
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,//9
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,//9
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,
        0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168, 0.192, 0.694, 0.168,//9
      ]);
      break;
    case "black":
      var colors = new Float32Array([    // Colors
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, //9
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, //18
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, //36
      ]);
      break;
  }
  var normals = new Float32Array([    // Normal //fix
    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,
    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,

    0.0871557427488, 0.996194698092, 0.0, 0.0871557427488, 0.996194698092, 0.0, 0.0871557427488, 0.996194698092, 0.0, 0.0871557427488, 0.996194698092, 0.0,
    0.258819045101, 0.96592582629, 0.0, 0.258819045101, 0.96592582629, 0.0, 0.258819045101, 0.96592582629, 0.0, 0.258819045101, 0.96592582629, 0.0,
    0.422618261744, 0.906307787034, 0.0, 0.422618261744, 0.906307787034, 0.0, 0.422618261744, 0.906307787034, 0.0, 0.422618261744, 0.906307787034, 0.0,
    0.573576436354, 0.819152044286, 0.0, 0.573576436354, 0.819152044286, 0.0, 0.573576436354, 0.819152044286, 0.0, 0.573576436354, 0.819152044286, 0.0,
    0.707106781184, 0.707106781184, 0.0, 0.707106781184, 0.707106781184, 0.0, 0.707106781184, 0.707106781184, 0.0, 0.707106781184, 0.707106781184, 0.0,
    0.819152044286, 0.573576436354, 0.0, 0.819152044286, 0.573576436354, 0.0, 0.819152044286, 0.573576436354, 0.0, 0.819152044286, 0.573576436354, 0.0,
    0.906307787034, 0.422618261744, 0.0, 0.906307787034, 0.422618261744, 0.0, 0.906307787034, 0.422618261744, 0.0, 0.906307787034, 0.422618261744, 0.0,
    0.96592582629, 0.258819045101, 0.0, 0.96592582629, 0.258819045101, 0.0, 0.96592582629, 0.258819045101, 0.0, 0.96592582629, 0.258819045101, 0.0,
    0.996194698092, 0.0871557427488, 0.0, 0.996194698092, 0.0871557427488, 0.0, 0.996194698092, 0.0871557427488, 0.0, 0.996194698092, 0.0871557427488, 0.0, //9

    0.0871557427488, -0.996194698092, 0.0, 0.0871557427488, -0.996194698092, 0.0, 0.0871557427488, -0.996194698092, 0.0, 0.0871557427488, -0.996194698092, 0.0,
    0.258819045101, -0.96592582629, 0.0, 0.258819045101, -0.96592582629, 0.0, 0.258819045101, -0.96592582629, 0.0, 0.258819045101, -0.96592582629, 0.0,
    0.422618261744, -0.906307787034, 0.0, 0.422618261744, -0.906307787034, 0.0, 0.422618261744, -0.906307787034, 0.0, 0.422618261744, -0.906307787034, 0.0,
    0.573576436354, -0.819152044286, 0.0, 0.573576436354, -0.819152044286, 0.0, 0.573576436354, -0.819152044286, 0.0, 0.573576436354, -0.819152044286, 0.0,
    0.707106781184, -0.707106781184, 0.0, 0.707106781184, -0.707106781184, 0.0, 0.707106781184, -0.707106781184, 0.0, 0.707106781184, -0.707106781184, 0.0,
    0.819152044286, -0.573576436354, 0.0, 0.819152044286, -0.573576436354, 0.0, 0.819152044286, -0.573576436354, 0.0, 0.819152044286, -0.573576436354, 0.0,
    0.906307787034, -0.422618261744, 0.0, 0.906307787034, -0.422618261744, 0.0, 0.906307787034, -0.422618261744, 0.0, 0.906307787034, -0.422618261744, 0.0,
    0.96592582629, -0.258819045101, 0.0, 0.96592582629, -0.258819045101, 0.0, 0.96592582629, -0.258819045101, 0.0, 0.96592582629, -0.258819045101, 0.0,
    0.996194698092, -0.0871557427488, 0.0, 0.996194698092, -0.0871557427488, 0.0, 0.996194698092, -0.0871557427488, 0.0, 0.996194698092, -0.0871557427488, 0.0,  //18

    -0.0871557427488, 0.996194698092, 0.0, -0.0871557427488, 0.996194698092, 0.0, -0.0871557427488, 0.996194698092, 0.0, -0.0871557427488, 0.996194698092, 0.0,
    -0.258819045101, 0.96592582629, 0.0, -0.258819045101, 0.96592582629, 0.0, -0.258819045101, 0.96592582629, 0.0, -0.258819045101, 0.96592582629, 0.0,
    -0.422618261744, 0.906307787034, 0.0, -0.422618261744, 0.906307787034, 0.0, -0.422618261744, 0.906307787034, 0.0, -0.422618261744, 0.906307787034, 0.0,
    -0.573576436354, 0.819152044286, 0.0, -0.573576436354, 0.819152044286, 0.0, -0.573576436354, 0.819152044286, 0.0, -0.573576436354, 0.819152044286, 0.0,
    -0.707106781184, 0.707106781184, 0.0, -0.707106781184, 0.707106781184, 0.0, -0.707106781184, 0.707106781184, 0.0, -0.707106781184, 0.707106781184, 0.0,
    -0.819152044286, 0.573576436354, 0.0, -0.819152044286, 0.573576436354, 0.0, -0.819152044286, 0.573576436354, 0.0, -0.819152044286, 0.573576436354, 0.0,
    -0.906307787034, 0.422618261744, 0.0, -0.906307787034, 0.422618261744, 0.0, -0.906307787034, 0.422618261744, 0.0, -0.906307787034, 0.422618261744, 0.0,
    -0.96592582629, 0.258819045101, 0.0, -0.96592582629, 0.258819045101, 0.0, -0.96592582629, 0.258819045101, 0.0, -0.96592582629, 0.258819045101, 0.0,
    -0.996194698092, 0.0871557427488, 0.0, -0.996194698092, 0.0871557427488, 0.0, -0.996194698092, 0.0871557427488, 0.0, -0.996194698092, 0.0871557427488, 0.0,  //27

    -0.0871557427488, -0.996194698092, 0.0, -0.0871557427488, -0.996194698092, 0.0, -0.0871557427488, -0.996194698092, 0.0, -0.0871557427488, -0.996194698092, 0.0,
    -0.258819045101, -0.96592582629, 0.0, -0.258819045101, -0.96592582629, 0.0, -0.258819045101, -0.96592582629, 0.0, -0.258819045101, -0.96592582629, 0.0,
    -0.422618261744, -0.906307787034, 0.0, -0.422618261744, -0.906307787034, 0.0, -0.422618261744, -0.906307787034, 0.0, -0.422618261744, -0.906307787034, 0.0,
    -0.573576436354, -0.819152044286, 0.0, -0.573576436354, -0.819152044286, 0.0, -0.573576436354, -0.819152044286, 0.0, -0.573576436354, -0.819152044286, 0.0,
    -0.707106781184, -0.707106781184, 0.0, -0.707106781184, -0.707106781184, 0.0, -0.707106781184, -0.707106781184, 0.0, -0.707106781184, -0.707106781184, 0.0,
    -0.819152044286, -0.573576436354, 0.0, -0.819152044286, -0.573576436354, 0.0, -0.819152044286, -0.573576436354, 0.0, -0.819152044286, -0.573576436354, 0.0,
    -0.906307787034, -0.422618261744, 0.0, -0.906307787034, -0.422618261744, 0.0, -0.906307787034, -0.422618261744, 0.0, -0.906307787034, -0.422618261744, 0.0,
    -0.96592582629, -0.258819045101, 0.0, -0.96592582629, -0.258819045101, 0.0, -0.96592582629, -0.258819045101, 0.0, -0.96592582629, -0.258819045101, 0.0,
    -0.996194698092, -0.0871557427488, 0.0, -0.996194698092, -0.0871557427488, 0.0, -0.996194698092, -0.0871557427488, 0.0, -0.996194698092, -0.0871557427488, 0.0,  //36
  ]);
  var indices = new Uint8Array([
    0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6, 0, 6, 7, 0, 7, 8, 0, 8, 9, 0, 9, 10, 0, 10, 11, 0, 11, 12, 0, 12, 13, 0, 13, 14, 0, 14, 15, 0, 15, 16, 0, 16, 17, 0, 17, 18, 0, 18, 19, 0, 19, 20, 0, 20, 21, 0, 21, 22, 0, 22, 23, 0, 23, 24, 0, 24, 25, 0, 25, 26, 0, 26, 27, 0, 27, 28, 0, 28, 29, 0, 29, 30, 0, 30, 31, 0, 31, 32, 0, 32, 33, 0, 33, 34, 0, 34, 35, 0, 35, 36, 0, 1, 36,
    37, 38, 39, 37, 39, 40, 37, 40, 41, 37, 41, 42, 37, 42, 43, 37, 43, 44, 37, 44, 45, 37, 45, 46, 37, 46, 47, 37, 47, 48, 37, 48, 49, 37, 49, 50, 37, 50, 51, 37, 51, 52, 37, 52, 53, 37, 53, 54, 37, 54, 55, 37, 55, 56, 37, 56, 57, 37, 57, 58, 37, 58, 59, 37, 59, 60, 37, 60, 61, 37, 61, 62, 37, 62, 63, 37, 63, 64, 37, 64, 65, 37, 65, 66, 37, 66, 67, 37, 67, 68, 37, 68, 69, 37, 69, 70, 37, 70, 71, 37, 71, 72, 37, 72, 73, 37, 38, 73,
    74, 75, 76, 75, 76, 77,
    78, 79, 80, 79, 80, 81,
    82, 83, 84, 83, 84, 85,
    86, 87, 88, 87, 88, 89,
    90, 91, 92, 91, 92, 93,
    94, 95, 96, 95, 96, 97,
    98, 99, 100, 99, 100, 101,
    102, 103, 104, 103, 104, 105,
    106, 107, 108, 107, 108, 109, //9
    110, 111, 112, 111, 112, 113,
    114, 115, 116, 115, 116, 117,
    118, 119, 120, 119, 120, 121,
    122, 123, 124, 123, 124, 125,
    126, 127, 128, 127, 128, 129,
    130, 131, 132, 131, 132, 133,
    134, 135, 136, 135, 136, 137,
    138, 139, 140, 139, 140, 141,
    142, 143, 144, 143, 144, 145, //18
    146, 147, 148, 147, 148, 149,
    150, 151, 152, 151, 152, 153,
    154, 155, 156, 155, 156, 157,
    158, 159, 160, 159, 160, 161,
    162, 163, 164, 163, 164, 165,
    166, 167, 168, 167, 168, 169,
    170, 171, 172, 171, 172, 173,
    174, 175, 176, 175, 176, 177,
    178, 179, 180, 179, 180, 181,
    182, 183, 184, 183, 184, 185,
    186, 187, 188, 187, 188, 189,
    190, 191, 192, 191, 192, 193,
    194, 195, 196, 195, 196, 197,
    198, 199, 200, 199, 200, 201,
    202, 203, 204, 203, 204, 205,
    206, 207, 208, 207, 208, 209,
    210, 211, 212, 211, 212, 213,
    214, 215, 216, 215, 216, 217, //36
  ]);
  // Write the vertex property to buffers (coordinates, colors and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Color', colors, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, 3, gl.FLOAT)) return -1;

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return false;
  }

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

  return indices.length;
}
function arch(gl) {
  var vertices = new Float32Array([ //Coorindates
    -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.4, -0.5, 0.5, 0.4, -0.1, 0.5, 0.393923101205, -0.0305407289332, 0.5, 0.375877048314, 0.0368080573303, 0.5, 0.346410161514, 0.1, 0.5, 0.306417777248, 0.1571150438, 0.5, 0.257115043875, 0.206417777248, 0.5, 0.2, 0.246410161514, 0.5, 0.13680805733, 0.275877048314, 0.5, 0.0694592710668, 0.293923101205, 0.5, 0, 0.3, 0.5, -0.0694592710668, 0.293923101205, 0.5, -0.13680805733, 0.275877048314, 0.5, -0.2, 0.246410161514, 0.5, -0.257115043875, 0.206417777248, 0.5, -0.306417777248, 0.1571150438, 0.5, -0.346410161514, 0.1, 0.5, -0.375877048314, 0.0368080573303, 0.5, -0.393923101205, -0.0305407289332, 0.5, -0.4, -0.1, 0.5, -0.4, -0.5, 0.5,   //front
    0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, // v0-v3-v4-v5 right
    0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, // v0-v5-v6-v1 up
    -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, // v1-v6-v7-v2 left
    -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.4, -0.5, -0.5, 0.4, -0.1, -0.5, 0.393923101205, -0.0305407289332, -0.5, 0.375877048314, 0.0368080573303, -0.5, 0.346410161514, 0.1, -0.5, 0.306417777248, 0.1571150438, -0.5, 0.257115043875, 0.206417777248, -0.5, 0.2, 0.246410161514, -0.5, 0.13680805733, 0.275877048314, -0.5, 0.0694592710668, 0.293923101205, -0.5, 0, 0.3, -0.5, -0.0694592710668, 0.293923101205, -0.5, -0.13680805733, 0.275877048314, -0.5, -0.2, 0.246410161514, -0.5, -0.257115043875, 0.206417777248, -0.5, -0.306417777248, 0.1571150438, -0.5, -0.346410161514, 0.1, -0.5, -0.375877048314, 0.0368080573303, -0.5, -0.393923101205, -0.0305407289332, -0.5, -0.4, -0.1, -0.5, -0.4, -0.5, -0.5,   //back
    -0.5, -0.5, -0.5, -0.4, -0.5, -0.5, -0.5, -0.5, 0.5, -0.4, -0.5, 0.5,// down-left
    0.5, -0.5, -0.5, 0.4, -0.5, -0.5, 0.5, -0.5, 0.5, 0.4, -0.5, 0.5,// down-right       
    -0.4, -0.5, -0.5, -0.4, -0.1, -0.5, -0.4, -0.5, 0.5, -0.4, -0.1, 0.5,  //inner-left
    0.4, -0.5, -0.5, 0.4, -0.1, -0.5, 0.4, -0.5, 0.5, 0.4, -0.1, 0.5, //inner-right
    -0.393923101205, -0.0305407289332, -0.5, -0.4, -0.1, -0.5, -0.393923101205, -0.0305407289332, 0.5, -0.4, -0.1, 0.5,  //il1
    0.393923101205, -0.0305407289332, -0.5, 0.4, -0.1, -0.5, 0.393923101205, -0.0305407289332, 0.5, 0.4, -0.1, 0.5,  //ir1
    -0.393923101205, -0.0305407289332, -0.5, -0.375877048314, 0.0368080573303, -0.5, -0.393923101205, -0.0305407289332, 0.5, -0.375877048314, 0.0368080573303, 0.5,  //il2
    0.393923101205, -0.0305407289332, -0.5, 0.375877048314, 0.0368080573303, -0.5, 0.393923101205, -0.0305407289332, 0.5, 0.375877048314, 0.0368080573303, 0.5,  //ir2
    -0.346410161514, 0.1, -0.5, -0.375877048314, 0.0368080573303, -0.5, -0.346410161514, 0.1, 0.5, -0.375877048314, 0.0368080573303, 0.5,  //il3
    0.346410161514, 0.1, -0.5, 0.375877048314, 0.0368080573303, -0.5, 0.346410161514, 0.1, 0.5, 0.375877048314, 0.0368080573303, 0.5,  //ir3
    -0.346410161514, 0.1, -0.5, -0.306417777248, 0.1571150438, -0.5, -0.346410161514, 0.1, 0.5, -0.306417777248, 0.1571150438, 0.5,  //il4
    0.346410161514, 0.1, -0.5, 0.306417777248, 0.1571150438, -0.5, 0.346410161514, 0.1, 0.5, 0.306417777248, 0.1571150438, 0.5,  //ir4
    -0.257115043875, 0.206417777248, -0.5, -0.306417777248, 0.1571150438, -0.5, -0.257115043875, 0.206417777248, 0.5, -0.306417777248, 0.1571150438, 0.5,  //il5
    0.257115043875, 0.206417777248, -0.5, 0.306417777248, 0.1571150438, -0.5, 0.257115043875, 0.206417777248, 0.5, 0.306417777248, 0.1571150438, 0.5,  //ir5
    -0.257115043875, 0.206417777248, -0.5, -0.2, 0.246410161514, -0.5, -0.257115043875, 0.206417777248, 0.5, -0.2, 0.246410161514, 0.5,  //il6
    0.257115043875, 0.206417777248, -0.5, 0.2, 0.246410161514, -0.5, 0.257115043875, 0.206417777248, 0.5, 0.2, 0.246410161514, 0.5,  //ir6
    -0.13680805733, 0.275877048314, -0.5, -0.2, 0.246410161514, -0.5, -0.13680805733, 0.275877048314, 0.5, -0.2, 0.246410161514, 0.5,  //il7
    0.13680805733, 0.275877048314, -0.5, 0.2, 0.246410161514, -0.5, 0.13680805733, 0.275877048314, 0.5, 0.2, 0.246410161514, 0.5,  //ir7
    -0.13680805733, 0.275877048314, -0.5, -0.0694592710668, 0.293923101205, -0.5, -0.13680805733, 0.275877048314, 0.5, -0.0694592710668, 0.293923101205, 0.5,  //il8
    0.13680805733, 0.275877048314, -0.5, 0.0694592710668, 0.293923101205, -0.5, 0.13680805733, 0.275877048314, 0.5, 0.0694592710668, 0.293923101205, 0.5,  //il8
    0, 0.3, -0.5, -0.0694592710668, 0.293923101205, -0.5, 0, 0.3, 0.5, -0.0694592710668, 0.293923101205, 0.5,  //il9
    0, 0.3, -0.5, 0.0694592710668, 0.293923101205, -0.5, 0, 0.3, 0.5, 0.0694592710668, 0.293923101205, 0.5,  //ir9

  ]);
  var colors = new Float32Array([    // Colors

    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,    // right
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,    // v0-v5-v6-v1 up
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,    //left

    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,    //down-left
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,    //down-right
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,    //inner-left
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //inner-right
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //1
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //1
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //2
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //2
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //3
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //3
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //4
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //4
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //5
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //5
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //6
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //6
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //7
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //7
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //8
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //8
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //9
    0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431, 0.588, 0.509, 0.431,     //9
  ]);

  var normals = new Float32Array([    // Normal //fix
    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,  // v0-v3-v4-v5 right
    0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v0-v5-v6-v1 up
    -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0,  // v1-v6-v7-v2 left
    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,   // v4-v7-v6-v5 back
    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,  // v7-v4-v3-v2 down-left
    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,  // v7-v4-v3-v2 down-right
    1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,  // inner-left swap??
    -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0,  //inner-right swap??
    0.996194698091, 0.0871557427459, 0.0, 0.996194698091, 0.0871557427459, 0.0, 0.996194698091, 0.0871557427459, 0.0, 0.996194698091, 0.0871557427459, 0.0,  // il1
    -0.996194698091, 0.0871557427459, 0.0, -0.996194698091, 0.0871557427459, 0.0, -0.996194698091, 0.0871557427459, 0.0, -0.996194698091, 0.0871557427459, 0.0,  // ir1
    0.965925826288, 0.258819045109, 0.0, 0.965925826288, 0.258819045109, 0.0, 0.965925826288, 0.258819045109, 0.0, 0.965925826288, 0.258819045109, 0.0,      //il2
    -0.965925826288, 0.258819045109, 0.0, -0.965925826288, 0.258819045109, 0.0, -0.965925826288, 0.258819045109, 0.0, -0.965925826288, 0.258819045109, 0.0,      //ir2
    0.90630778704, 0.422618261734, 0.0, 0.90630778704, 0.422618261734, 0.0, 0.90630778704, 0.422618261734, 0.0, 0.90630778704, 0.422618261734, 0.0,      //il3
    -0.90630778704, 0.422618261734, 0.0, -0.90630778704, 0.422618261734, 0.0, -0.90630778704, 0.422618261734, 0.0, -0.90630778704, 0.422618261734, 0.0,      //ir3
    0.819152043938, 0.573576436852, 0.0, 0.819152043938, 0.573576436852, 0.0, 0.819152043938, 0.573576436852, 0.0, 0.819152043938, 0.0, 0.573576436852,      //il4
    -0.819152043938, 0.573576436852, 0.0, -0.819152043938, 0.573576436852, 0.0, -0.819152043938, 0.573576436852, 0.0, -0.819152043938, 0.0, 0.573576436852,      //ir4
    0.707106781724, 0.707106780649, 0.0, 0.707106781724, 0.707106780649, 0.0, 0.707106781724, 0.707106780649, 0.0, 0.707106781724, 0.707106780649, 0.0,      //il5
    -0.707106781724, 0.707106780649, 0.0, -0.707106781724, 0.707106780649, 0.0, -0.707106781724, 0.707106780649, 0.0, -0.707106781724, 0.707106780649, 0.0,      //ir5
    0.573576435912, 0.819152043671, 0.0, 0.573576435912, 0.819152043671, 0.0, 0.573576435912, 0.819152043671, 0.0, 0.573576435912, 0.819152043671, 0.0,      //il6
    -0.573576435912, 0.819152043671, 0.0, -0.573576435912, 0.819152043671, 0.0, -0.573576435912, 0.819152043671, 0.0, -0.573576435912, 0.819152043671, 0.0,       //ir6
    0.422618261732, 0.906307787041, 0.0, 0.422618261732, 0.906307787041, 0.0, 0.422618261732, 0.906307787041, 0.0, 0.422618261732, 0.906307787041, 0.0,      //il7
    -0.422618261732, 0.906307787041, 0.0, -0.422618261732, 0.906307787041, 0.0, -0.422618261732, 0.906307787041, 0.0, -0.422618261732, 0.906307787041, 0.0,      //il7
    0.25881904511, 0.965925826285, 0.0, 0.25881904511, 0.965925826285, 0.0, 0.25881904511, 0.965925826285, 0.0, 0.25881904511, 0.965925826285, 0.0,      //il8 
    -0.25881904511, 0.965925826285, 0.0, -0.25881904511, 0.965925826285, 0.0, -0.25881904511, 0.965925826285, 0.0, -0.25881904511, 0.965925826285, 0.0,      //ir8
    0.087155742746, 0.996194698093, 0.0, 0.087155742746, 0.996194698093, 0.0, 0.087155742746, 0.996194698093, 0.0, 0.087155742746, 0.996194698093, 0.0,      //il9
    -0.087155742746, 0.996194698093, 0.0, -0.087155742746, 0.996194698093, 0.0, -0.087155742746, 0.996194698093, 0.0, -0.087155742746, 0.996194698093, 0.0,      //ir9
    //calc
  ]);
  // Indices of the vertices
  var indices = new Uint8Array([
    0, 1, 24, 1, 23, 24, 1, 22, 23, 1, 21, 22, 1, 20, 21, 1, 19, 20, 1, 18, 19, 1, 17, 18, 1, 16, 17, 1, 15, 16, 1, 14, 15, 1, 2, 14, 2, 13, 14, 2, 12, 13, 2, 11, 12, 2, 10, 11, 2, 9, 10, 2, 8, 9, 2, 7, 8, 2, 6, 7, 2, 5, 6, 2, 4, 5, 2, 3, 4,
    25, 26, 27, 25, 27, 28,  //right
    29, 30, 31, 29, 31, 32,  //top
    33, 34, 35, 33, 35, 36,  //left
    37, 38, 61, 38, 60, 61, 38, 59, 60, 38, 58, 59, 38, 57, 58, 38, 56, 57, 38, 55, 56, 38, 54, 55, 38, 53, 54, 38, 52, 53, 38, 51, 52, 38, 39, 51, 39, 50, 51, 39, 49, 50, 39, 48, 49, 39, 47, 48, 39, 46, 47, 39, 45, 46, 39, 44, 45, 39, 43, 44, 39, 42, 43, 39, 41, 42, 39, 40, 41,
    62, 63, 64, 63, 64, 65, //down-left
    66, 67, 68, 67, 68, 69, //down-right
    70, 71, 72, 71, 72, 73, //inner-left
    74, 75, 76, 75, 76, 77, //inner-right
    78, 79, 80, 79, 80, 81, //1
    82, 83, 84, 83, 84, 85,//1
    86, 87, 88, 87, 88, 89,//2
    90, 91, 92, 91, 92, 93,//2
    94, 95, 96, 95, 96, 97,//3
    98, 99, 100, 99, 100, 101, //3
    102, 103, 104, 103, 104, 105, //4
    106, 107, 108, 107, 108, 109,//4
    110, 111, 112, 111, 112, 113, //5
    114, 115, 116, 115, 116, 117,  //5
    118, 119, 120, 119, 120, 121, //6
    122, 123, 124, 123, 124, 125, //6
    126, 127, 128, 127, 128, 129, //7
    130, 131, 132, 131, 132, 133, //7
    134, 135, 136, 135, 136, 137,  //8
    138, 139, 140, 139, 140, 141, //8 
    142, 143, 144, 143, 144, 145, //9
    146, 147, 148, 147, 148, 149, //9
  ]);

  // Write the vertex property to buffers (coordinates, colors and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Color', colors, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, 3, gl.FLOAT)) return -1;

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return false;
  }

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

  return indices.length;
}
function triprism(gl, colour) {
  // Create a cube
  //    v6----- v5
  //   /|      /|
  //  v1------v0|
  //  | |     | |
  //  | |v7---|-|v4
  //  |/      |/
  //  v2------v3
  var vertices = new Float32Array([   // Coordinates
    -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, // v1-v2-v3 front
    -0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, 0.5, -0.5,   // v1-v3-v4-v6
    -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, // v1-v6-v7-v2 left 
    -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, // v7-v4-v3-v2 down
    0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, // v4-v7-v6 back
  ]);


  switch (colour) {
    case "grey":
      var colors = new Float32Array([    // Colors
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v0-v3-v4-v5 right
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v0-v5-v6-v1 up
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v1-v6-v7-v2 left
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v7-v4-v3-v2 down
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
      ]); break;
    case "black":
      var colors = new Float32Array([    // Colors
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
      ]); break;
  }

  var normals = new Float32Array([    // Normal
    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,  // v1-v2-v3 front
    0.70710678118, 0.70710678118, 0.0, 0.70710678118, 0.70710678118, 0.0, 0.70710678118, 0.70710678118, 0.0, 0.70710678118, 0.70710678118, 0.0,// v1-v3-v4-v6
    -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0,  // v1-v6-v7-v2 left
    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,  // v7-v4-v3-v2 down
    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,   // v4-v7-v6 back
  ]);



  // Indices of the vertices
  var indices = new Uint8Array([
    0, 1, 2, // front
    3, 4, 5, 3, 5, 6,
    7, 8, 9, 7, 9, 10,
    11, 12, 13, 11, 13, 14,
    15, 16, 17

  ]);

  // Write the vertex property to buffers (coordinates, colors and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Color', colors, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, 3, gl.FLOAT)) return -1;

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return false;
  }

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

  return indices.length;
}
function cuboid(gl, colour) {
  // Create a cube
  //    v6----- v5
  //   /|      /|
  //  v1------v0|
  //  | |     | |
  //  | |v7---|-|v4
  //  |/      |/
  //  v2------v3
  var vertices = new Float32Array([   // Coordinates
    0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, // v0-v1-v2-v3 front
    0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, // v0-v3-v4-v5 right
    0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, // v0-v5-v6-v1 up
    -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, // v1-v6-v7-v2 left
    -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, // v7-v4-v3-v2 down
    0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5  // v4-v7-v6-v5 back
  ]);

  switch (colour) {
    case "grey":
      var colors = new Float32Array([    // Colors
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v0-v1-v2-v3 front
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v0-v3-v4-v5 right
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v0-v5-v6-v1 up
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v1-v6-v7-v2 left
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,    // v7-v4-v3-v2 down
        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,　  // v4-v7-v6-v5 back      
      ]); break;
    case "black":
      var colors = new Float32Array([    // Colors
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,    // v0-v1-v2-v3 front
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
      ]); break;
    case "green":
      var colors = new Float32Array([    // Colors
        0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0,    // v0-v1-v2-v3 front
        0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0,
        0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0,
        0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0,
        0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0,
        0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0,
      ]); break;
    case "brown":
      var colors = new Float32Array([    // Colors
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,    // v0-v1-v2-v3 front
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
        0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007, 0.38, 0.086, 0.007,
      ]); break;
    case "blue":
      var colors = new Float32Array([    // Colors
        0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1,   // v0-v1-v2-v3 front
        0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1,
        0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1,
        0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1,
        0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1,
        0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1,
      ]); break;
  }

  var normals = new Float32Array([    // Normal
    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,  // v0-v1-v2-v3 front
    1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,  // v0-v3-v4-v5 right
    0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v0-v5-v6-v1 up
    -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0,  // v1-v6-v7-v2 left
    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,  // v7-v4-v3-v2 down
    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0   // v4-v7-v6-v5 back
  ]);

  var texCoords = new Float32Array([
    1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v0-v1-v2-v3 front
    0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,  // v0-v3-v4-v5 right
    1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,  // v0-v5-v6-v1 up
    1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v1-v6-v7-v2 left
    0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,  // v7-v4-v3-v2 down
    0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0   // v4-v7-v6-v5 back
  ]);


  // Indices of the vertices
  var indices = new Uint8Array([
    0, 1, 2, 0, 2, 3,    // front
    4, 5, 6, 4, 6, 7,    // right
    8, 9, 10, 8, 10, 11,    // up
    12, 13, 14, 12, 14, 15,    // left
    16, 17, 18, 16, 18, 19,    // down
    20, 21, 22, 20, 22, 23     // back
  ]);

  //console.log("Inside green cube")
  // Write the vertex property to buffers (coordinates, colors and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Color', colors, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_TexCoords', texCoords, 2, gl.FLOAT)) return -1;

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return false;
  }

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

  return indices.length;
}
function pole(gl) {
  // Create a cube
  //    v6----- v5
  //   /|      /|
  //  v1------v0|
  //  | |     | |
  //  | |v7---|-|v4
  //  |/      |/
  //  v2------v3
  var vertices = new Float32Array([   // Coordinates
    0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, // v0-v1-v2-v3 front
    0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, // v0-v3-v4-v5 right
    0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, // v0-v5-v6-v1 up
    -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, // v1-v6-v7-v2 left
    -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, // v7-v4-v3-v2 down
    0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5  // v4-v7-v6-v5 back
  ]);


  var colors = new Float32Array([    // Colors
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,   // v0-v1-v2-v3 front
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,   // v0-v3-v4-v5 right
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,   // v0-v5-v6-v1 up
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,   // v1-v6-v7-v2 left
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,   // v7-v4-v3-v2 down
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,   // v4-v7-v6-v5 back
  ]);


  var normals = new Float32Array([    // Normal
    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,  // v0-v1-v2-v3 front
    1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,  // v0-v3-v4-v5 right
    0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v0-v5-v6-v1 up
    -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0,  // v1-v6-v7-v2 left
    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,  // v7-v4-v3-v2 down
    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0   // v4-v7-v6-v5 back
  ]);

  // Texture Coordinates
  var texCoords = new Float32Array([
    1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v0-v1-v2-v3 front
    0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,  // v0-v3-v4-v5 right
    1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,  // v0-v5-v6-v1 up
    1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,  // v1-v6-v7-v2 left
    0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,  // v7-v4-v3-v2 down
    0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0   // v4-v7-v6-v5 back
  ]);


  // Indices of the vertices
  var indices = new Uint8Array([
    0, 1, 2, 0, 2, 3,    // front
    4, 5, 6, 4, 6, 7,    // right
    8, 9, 10, 8, 10, 11,    // up
    12, 13, 14, 12, 14, 15,    // left
    16, 17, 18, 16, 18, 19,    // down
    20, 21, 22, 20, 22, 23     // back
  ]);

  //console.log("Inside green cube")
  // Write the vertex property to buffers (coordinates, colors and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Color', colors, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_TexCoords', texCoords, 2, gl.FLOAT)) return -1;

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return false;
  }

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

  return indices.length;
}


function initArrayBuffer(gl, attribute, data, num, type) {
  // Create a buffer object
  var buffer = gl.createBuffer();
  if (!buffer) {
    console.log('Failed to create the buffer object');
    return false;
  }
  // Write date into the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  // Assign the buffer object to the attribute variable
  var a_attribute = gl.getAttribLocation(gl.program, attribute);
  if (a_attribute < 0) {
    console.log('Failed to get the storage location of ' + attribute);
    return false;
  }
  gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
  // Enable the assignment of the buffer object to the attribute variable
  gl.enableVertexAttribArray(a_attribute);

  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  return true;
}

function initAxesVertexBuffers(gl) {

  var verticesColors = new Float32Array([
    // Vertex coordinates and color (for axes)
    -20.0, 0.0, 0.0, 1.0, 1.0, 1.0,  // (x,y,z), (r,g,b) 
    20.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    0.0, 20.0, 0.0, 1.0, 1.0, 1.0,
    0.0, -20.0, 0.0, 1.0, 1.0, 1.0,
    0.0, 0.0, -20.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 20.0, 1.0, 1.0, 1.0
  ]);
  var n = 6;

  // Create a buffer object
  var vertexColorBuffer = gl.createBuffer();
  if (!vertexColorBuffer) {
    console.log('Failed to create the buffer object');
    return false;
  }

  // Bind the buffer object to target
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);

  var FSIZE = verticesColors.BYTES_PER_ELEMENT;
  //Get the storage location of a_Position, assign and enable buffer
  var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
  if (a_Position < 0) {
    console.log('Failed to get the storage location of a_Position');
    return -1;
  }
  gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 6, 0);
  gl.enableVertexAttribArray(a_Position);  // Enable the assignment of the buffer object

  // Get the storage location of a_Position, assign buffer and enable
  var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
  if (a_Color < 0) {
    console.log('Failed to get the storage location of a_Color');
    return -1;
  }
  gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);
  gl.enableVertexAttribArray(a_Color);  // Enable the assignment of the buffer object

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  return n;
}

var g_matrixStack = []; // Array for storing a matrix
function pushMatrix(m) { // Store the specified matrix to the array
  var m2 = new Matrix4(m);
  g_matrixStack.push(m2);
}

function popMatrix() { // Retrieve the matrix from the array
  return g_matrixStack.pop();
}

function draw(gl, u_ModelMatrix, u_NormalMatrix, u_isLighting, u_UseTextures, arr_is, translation) {
  // Clear color and depth buffer
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  gl.uniform1i(u_isLighting, true); // Will apply lighting 
  gl.uniform1i(u_UseTextures, false);

  // Set the vertex coordinates and color (for the x, y axes)

  var n = initAxesVertexBuffers(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  // Calculate the view matrix and the projection matrix
  modelMatrix.setTranslate(0, 0, 0);  // No Translation
  // Pass the model matrix to the uniform variable
  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);

  // Draw x and y axes
  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, true);
  } else {
    gl.uniform1i(u_UseTextures, false);
  }

  // Rotate, and then translate
  modelMatrix.setTranslate(0, 0, 0);  // Translation (No translation is supported here)
  modelMatrix.rotate(g_yAngle, 0, 1, 0); // Rotate along y axis
  modelMatrix.rotate(g_xAngle, 1, 0, 0); // Rotate along x axis

  if (translation > 12.2) {
    train_right = false;
  } else if (translation < 0) {
    train_right = true;
  }


  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, false);
  }
  if (!arr_is[1]) {
    var n = cylinder(gl, "grey");
  } else {
    var n = cylinder(gl, "yellow");
  }
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(1, -0.1, 3);
  modelMatrix.scale(0.3, 0.3, 0.3);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(-1, -0.1, 3);
  modelMatrix.scale(0.3, 0.3, 0.3);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(1, -0.1, 4);
  modelMatrix.scale(0.3, 0.3, 0.3);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(-1, -0.1, 4);
  modelMatrix.scale(0.3, 0.3, 0.3);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  var n = cylinder(gl, "green");

  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(7, 0.9, 3);
  modelMatrix.scale(1, 1.25, 1);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(4, 0.9, 4);
  modelMatrix.scale(1, 1.25, 1);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  var n = cylinder(gl, "grey");
  pushMatrix(modelMatrix);  //viaductTopLong
  modelMatrix.translate(0, 3, -4);
  modelMatrix.scale(20, 0.125, 0.125);
  modelMatrix.rotate(90, 0, 1, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopLong
  modelMatrix.translate(0, 3, -6);
  modelMatrix.scale(20, 0.125, 0.125);
  modelMatrix.rotate(90, 0, 1, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(0, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(0, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-1, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-1, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-2, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-2, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-3, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-3, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-4, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-4, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();


  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-5, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-5, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-6, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-6, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-7, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-7, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-8, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-8, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-9, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(-9, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(1, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(1, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(2, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(2, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(3, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(3, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(4, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(4, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();


  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(5, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(5, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(6, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(6, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(7, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(7, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(8, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(8, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(9, 2.5, -4);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductTopV
  modelMatrix.translate(9, 2.5, -6);
  modelMatrix.scale(0.125, 1, 0.125);
  modelMatrix.rotate(90, 1, 0, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  var n = cylinder(gl, "black");

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-9.5 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-9.5 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-8.9 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-8.9 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-7.1 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-7.1 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-6.5 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-6.5 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();



  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-5.25 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-5.25 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-4.65 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-4.65 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-2.85 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-2.85 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-2.25 + translation, 2.4, -4.45);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //wheel
  modelMatrix.translate(-2.25 + translation, 2.4, -5.55);
  modelMatrix.scale(0.5, 0.5, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, true);
  }



  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, false);
  }
  var n = cylinder(gl, "brown");
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(4, -0.8, 4);
  modelMatrix.scale(0.3, 2.5, 0.3);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(3.75, -0.5, 3.6);
  modelMatrix.rotate(45, 1, 1, 0);
  modelMatrix.scale(0.25, 0.25, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(3.7, -0.55, 4.4);
  modelMatrix.rotate(-45, 1, 1, 0);
  modelMatrix.scale(0.25, 0.25, 1.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(4.4, -0.3, 4.15);
  modelMatrix.rotate(-120, 1, 0, 1);
  modelMatrix.scale(0.25, 0.25, 1.2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(3.8, -0.1, 4);
  modelMatrix.rotate(125, 1, 0, 1);
  modelMatrix.scale(0.2, 0.2, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(3.9, 0.05, 4.3);
  modelMatrix.rotate(-20, 1, 1, 0);
  modelMatrix.scale(0.2, 0.2, 0.4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(4.2, -0.05, 4);
  modelMatrix.rotate(190, 1, 0, 1);
  modelMatrix.scale(0.2, 0.2, 0.4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(4.7, -0.3, 4.2);
  modelMatrix.rotate(90, 0, 1, 0);
  modelMatrix.scale(0.15, 0.15, 0.6);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree1
  modelMatrix.translate(3.6, -0.3, 4.5);
  modelMatrix.rotate(90, 1, 0, 0);
  modelMatrix.scale(0.15, 0.15, 0.4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();



  pushMatrix(modelMatrix);  //tree2
  modelMatrix.translate(7, -0.8, 3);
  modelMatrix.scale(0.3, 2.5, 0.3);
  modelMatrix.rotate(90, 1, 0, 0)
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree2
  modelMatrix.translate(6.75, -0.5, 2.6);
  modelMatrix.rotate(45, 1, 1, 0);
  modelMatrix.scale(0.25, 0.25, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree2
  modelMatrix.translate(6.7, -0.55, 3.4);
  modelMatrix.rotate(-45, 1, 1, 0);
  modelMatrix.scale(0.25, 0.25, 1.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree2
  modelMatrix.translate(7.4, -0.3, 3.15);
  modelMatrix.rotate(-120, 1, 0, 1);
  modelMatrix.scale(0.25, 0.25, 1.2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree2
  modelMatrix.translate(6.8, -0.1, 3);
  modelMatrix.rotate(125, 1, 0, 1);
  modelMatrix.scale(0.2, 0.2, 0.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //tree2
  modelMatrix.translate(7.2, -0.05, 3);
  modelMatrix.rotate(190, 1, 0, 1);
  modelMatrix.scale(0.2, 0.2, 0.4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, true);
  }


  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, false);
  }
  var n = arch(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);
  modelMatrix.translate(0, 0, -5);
  modelMatrix.scale(4, 4, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(-4, 0, -5);
  modelMatrix.scale(4, 4, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(4, 0, -5);
  modelMatrix.scale(4, 4, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(-8, 0, -5);
  modelMatrix.scale(4, 4, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(8, 0, -5);
  modelMatrix.scale(4, 4, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, true);
  }


  var n = triprism(gl, "black");
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);
  modelMatrix.translate(0, -1.75, 4.5);
  modelMatrix.scale(2, 0.25, 1);
  modelMatrix.rotate(-90, 0, 1, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(0, -1.75, 2.5);
  modelMatrix.scale(2, 0.25, 1);
  modelMatrix.rotate(90, 0, 1, 0);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  var n = cuboid(gl, "black");
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);  //pc
  modelMatrix.translate(0, -1.75, 3.5);
  modelMatrix.scale(2, 0.25, 1);
  modelMatrix.rotate(90, 0, 1, 0);
  gl.uniform1i(u_Sampler, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //road1
  modelMatrix.translate(0, -1.88, 0);
  modelMatrix.scale(2, 0.0125, 12);
  gl.uniform1i(u_Sampler, 3);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //road1
  modelMatrix.translate(5.5, -1.88, -1);
  modelMatrix.scale(9, 0.0125, 2);
  modelMatrix.rotate(90, 0, 1, 0);
  gl.uniform1i(u_Sampler, 3);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  var n = cuboid(gl, "green");
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);
  modelMatrix.translate(0, -2, 0);
  modelMatrix.scale(20, 0.25, 12);
  gl.uniform1i(u_Sampler, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, false);
  }
  var n = cuboid(gl, "brown");
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);  //viaTrackLong
  modelMatrix.translate(0, 2.1, -5.5);
  modelMatrix.scale(20, 0.15, 0.15);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrackLong
  modelMatrix.translate(0, 2.1, -4.5);
  modelMatrix.scale(20, 0.15, 0.15);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(0, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(1.5, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(3, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(4.5, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(6, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(7.5, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(9, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(-1.5, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);

  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(-3, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(-4.5, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(-6, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(-7.5, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaTrack
  modelMatrix.translate(-9, 2, -5);
  modelMatrix.scale(0.5, 0.2, 2);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  var n = cuboid(gl, "blue");
  pushMatrix(modelMatrix);  //trainMain
  modelMatrix.translate(-8 + translation, 3.3, -5);
  modelMatrix.scale(4, 1.5, 1.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //trainMain
  modelMatrix.translate(-3.8 + translation, 3.3, -5);
  modelMatrix.scale(4, 1.5, 1.5);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();
  var n = cuboid(gl, "grey");
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }

  pushMatrix(modelMatrix);  //side
  modelMatrix.translate(5.5, -1.75, 0);
  modelMatrix.scale(9, 0.25, 0.25);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //side
  modelMatrix.translate(5.5, -1.75, -2);
  modelMatrix.scale(9, 0.25, 0.25);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //side
  modelMatrix.translate(-1, -1.75, 0);
  modelMatrix.scale(0.25, 0.25, 12);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //side
  modelMatrix.translate(1, -1.75, 3);
  modelMatrix.scale(0.25, 0.25, 6);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //side
  modelMatrix.translate(1, -1.75, -4);
  modelMatrix.scale(0.25, 0.25, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-9.5 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-9.5 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-8.5 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-8.5 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-7.5 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-7.5 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-6.5 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-6.5 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();


  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-5.3 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-5.3 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-4.3 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-4.3 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-3.3 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-3.3 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-2.3 + translation, 3.4, -4.2);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //windows
  modelMatrix.translate(-2.3 + translation, 3.4, -5.8);
  modelMatrix.scale(0.75, 1, 0.1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  modelMatrix = popMatrix();


  if (arr_is[0]) {
    gl.uniform1i(u_UseTextures, true);
  }
  pushMatrix(modelMatrix);  //viaductLong
  modelMatrix.translate(0, 2, -4);
  modelMatrix.scale(20, 0.25, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductLong
  modelMatrix.translate(0, 2, -6);
  modelMatrix.scale(20, 0.25, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(0, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(0, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-1.5, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-1.5, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-3, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-3, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-4.5, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-4.5, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-6, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-6, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-7.5, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-7.5, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-9, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(-9, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(1.5, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(1.5, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(3, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(3, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(4.5, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(4.5, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(6, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(6, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(7.5, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(7.5, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(9, 1.75, -6);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);  //viaductV
  modelMatrix.translate(9, 1.75, -4);
  modelMatrix.scale(0.2, 0.5, 0.25);
  gl.uniform1i(u_Sampler, 4);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);
  modelMatrix = popMatrix();








  var n = pole(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  pushMatrix(modelMatrix);
  modelMatrix.translate(-1, -1, 3);
  modelMatrix.scale(0.1, 1.5, 0.1);
  gl.uniform1i(u_Sampler, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);

  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(1, -1, 3);
  modelMatrix.scale(0.1, 1.5, 0.1);
  gl.uniform1i(u_Sampler, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);

  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(1, -1, 4);
  modelMatrix.scale(0.1, 1.5, 0.1);
  gl.uniform1i(u_Sampler, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);

  modelMatrix = popMatrix();

  pushMatrix(modelMatrix);
  modelMatrix.translate(-1, -1, 4);
  modelMatrix.scale(0.1, 1.5, 0.1);
  gl.uniform1i(u_Sampler, 1);
  drawbox(gl, u_ModelMatrix, u_NormalMatrix, n);
  gl.uniform1i(u_Sampler, 0);

  modelMatrix = popMatrix();



}

function drawbox(gl, u_ModelMatrix, u_NormalMatrix, n) {
  pushMatrix(modelMatrix);

  // Pass the model matrix to the uniform variable
  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);

  // Calculate the normal transformation matrix and pass it to u_NormalMatrix
  g_normalMatrix.setInverseOf(modelMatrix);
  g_normalMatrix.transpose();
  gl.uniformMatrix4fv(u_NormalMatrix, false, g_normalMatrix.elements);

  // Draw the cube
  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);

  modelMatrix = popMatrix();
}
function loadTexture(gl, texture, textureIndex) {
  gl.activeTexture(textureIndex);
  // Bind the texture object to the target

  gl.bindTexture(gl.TEXTURE_2D, texture);
  // Set the texture image

  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
  gl.texImage2D(
    gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,
    gl.UNSIGNED_BYTE,
    texture.image
  );
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, texture.image);
}
function animateTranslate(translation) {
  if (train_right) {
    translation = translation + 0.05
  } else {
    translation = translation - 0.05
  }
  return translation;
}